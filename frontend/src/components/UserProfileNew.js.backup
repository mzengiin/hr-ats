import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { usersAPI, handleAPIError } from '../services/api';
import api from '../services/api';
import { formatTurkishPhone, validateTurkishPhone } from '../utils/phoneMask';
import LoadingSpinner from './LoadingSpinner';

const UserProfileNew = () => {
  const { user, getCurrentUser, changePassword } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [activeTab, setActiveTab] = useState('profile');
  const [profileData, setProfileData] = useState({
    first_name: '',
    last_name: '',
    email: '',
    phone: '',
  });
  const [passwordData, setPasswordData] = useState({
    current_password: '',
    new_password: '',
    confirm_password: '',
  });
  const [profilePhoto, setProfilePhoto] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);
  const [userRole, setUserRole] = useState(null);
  const [userPermissions, setUserPermissions] = useState([]);

  // Load user data
  useEffect(() => {
    if (user) {
      setProfileData({
        first_name: user.first_name || '',
        last_name: user.last_name || '',
        email: user.email || '',
        phone: user.phone || '',
      });
      
      // Set profile image preview
      if (user.profile_photo) {
        setPreviewImage(user.profile_photo);
      }
      
      // Set role and permissions
      if (user.role) {
        setUserRole({
          name: user.role.name || user.role,
          description: user.role.description || '',
          permissions: user.role.permissions || []
        });
        setUserPermissions(user.role.permissions || []);
      }
    }
  }, [user]);

  // Load role and permissions from API
  useEffect(() => {
    const loadRoleData = async () => {
      try {
        // Get all roles and find the one matching user's role
        const response = await api.get('/roles/');
        if (response.data.success) {
          const roles = response.data.data.roles;
          const userRoleData = roles.find(role => role.name === user?.role);
          if (userRoleData) {
            setUserRole(userRoleData);
            setUserPermissions(userRoleData.permissions || []);
          }
        }
      } catch (error) {
        console.error('Error loading role data:', error);
        // Fallback to basic role info
        if (user?.role) {
          setUserRole({
            name: user.role,
            description: 'Kullanıcı rolü',
            permissions: []
          });
        }
      }
    };

    if (user?.role) {
      loadRoleData();
    }
  }, [user]);

  // Handle profile update
  const handleProfileUpdate = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      // Create FormData for file upload
      const formData = new FormData();
      formData.append('first_name', profileData.first_name);
      formData.append('last_name', profileData.last_name);
      formData.append('phone', profileData.phone);
      
      if (profilePhoto) {
        formData.append('profile_photo', profilePhoto);
      }

      await usersAPI.updateUser(user.id, formData);
      await getCurrentUser(); // Refresh user data
      setSuccess('Profil başarıyla güncellendi');
      setProfilePhoto(null); // Clear file input
    } catch (error) {
      setError(handleAPIError(error));
    } finally {
      setLoading(false);
    }
  };

  // Handle password change
  const handlePasswordChange = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(null);

    if (passwordData.new_password !== passwordData.confirm_password) {
      setError('Yeni şifreler eşleşmiyor');
      setLoading(false);
      return;
    }

    try {
      await changePassword(passwordData.current_password, passwordData.new_password);
      setSuccess('Şifre başarıyla değiştirildi');
      setPasswordData({
        current_password: '',
        new_password: '',
        confirm_password: '',
      });
    } catch (error) {
      setError(handleAPIError(error));
    } finally {
      setLoading(false);
    }
  };

  // Handle input changes
  const handleProfileChange = (e) => {
    const { name, value } = e.target;
    
    // Telefon numarası mask'ı - UserForm ile aynı
    if (name === 'phone') {
      let maskedValue = value.replace(/\D/g, ''); // Sadece rakamları al
      if (maskedValue.length > 0) {
        if (maskedValue.length <= 3) {
          maskedValue = maskedValue;
        } else if (maskedValue.length <= 6) {
          maskedValue = maskedValue.slice(0, 3) + ' ' + maskedValue.slice(3);
        } else if (maskedValue.length <= 8) {
          maskedValue = maskedValue.slice(0, 3) + ' ' + maskedValue.slice(3, 6) + ' ' + maskedValue.slice(6);
        } else if (maskedValue.length <= 10) {
          maskedValue = maskedValue.slice(0, 3) + ' ' + maskedValue.slice(3, 6) + ' ' + maskedValue.slice(6, 8) + ' ' + maskedValue.slice(8);
        } else {
          maskedValue = maskedValue.slice(0, 3) + ' ' + maskedValue.slice(3, 6) + ' ' + maskedValue.slice(6, 8) + ' ' + maskedValue.slice(8, 10);
        }
      }
      
      setProfileData(prev => ({
        ...prev,
        [name]: maskedValue
      }));
    } else {
      setProfileData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  // Handle image change
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        setError('Lütfen geçerli bir resim dosyası seçin');
        return;
      }
      
      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setError('Resim dosyası 5MB\'dan küçük olmalıdır');
        return;
      }

      setProfilePhoto(file);

      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setPreviewImage(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handlePasswordChangeInput = (e) => {
    const { name, value } = e.target;
    setPasswordData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const clearMessages = () => {
    setError(null);
    setSuccess(null);
  };

  if (!user) {
    return <LoadingSpinner />;
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Kullanıcı Profili</h1>
          <p className="mt-2 text-gray-600">Profil bilgilerinizi görüntüleyin ve düzenleyin</p>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8 px-6" aria-label="Tabs">
              <button
                className={`flex items-center whitespace-nowrap border-b-2 py-4 px-1 text-sm font-semibold ${
                  activeTab === 'profile'
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                }`}
                onClick={() => setActiveTab('profile')}
              >
                <span className="material-symbols-outlined mr-2 text-xl">person</span>
                Profil Bilgileri
              </button>
              <button
                className={`flex items-center whitespace-nowrap border-b-2 py-4 px-1 text-sm font-semibold ${
                  activeTab === 'password'
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                }`}
                onClick={() => setActiveTab('password')}
              >
                <span className="material-symbols-outlined mr-2 text-xl">lock</span>
                Şifre Değiştir
              </button>
              <button
                className={`flex items-center whitespace-nowrap border-b-2 py-4 px-1 text-sm font-semibold ${
                  activeTab === 'roles'
                    ? 'border-blue-600 text-blue-600'
                    : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                }`}
                onClick={() => setActiveTab('roles')}
              >
                <span className="material-symbols-outlined mr-2 text-xl">verified_user</span>
                Yetkilerim
              </button>
            </nav>
          </div>

          {/* Tab Content */}
          <div className="p-6">
            {/* Profile Tab */}
            {activeTab === 'profile' && (
              <div className="space-y-6">
                {/* Profile Image Section */}
                <div className="flex justify-center">
                  <div className="relative">
                    <div className="h-24 w-24 flex-shrink-0">
                      {previewImage ? (
                        <img
                          className="h-24 w-24 rounded-full object-cover"
                          src={previewImage}
                          alt="Profil önizleme"
                        />
                      ) : (
                        <div className="h-24 w-24 rounded-full bg-gray-200 flex items-center justify-center">
                          <span className="material-symbols-outlined text-gray-500 text-3xl">person</span>
                        </div>
                      )}
                    </div>
                    <button
                      type="button"
                      onClick={() => document.getElementById('profile-photo-input').click()}
                      className="absolute -bottom-1 -right-1 h-8 w-8 bg-[#137fec] text-white rounded-full flex items-center justify-center hover:bg-blue-700 transition-colors"
                    >
                      <span className="material-symbols-outlined text-sm">edit</span>
                    </button>
                    <input
                      id="profile-photo-input"
                      type="file"
                      accept="image/*"
                      onChange={handleImageChange}
                      className="hidden"
                    />
                  </div>
                </div>
                <p className="text-xs text-gray-500 text-center">JPG, PNG veya GIF. Maksimum 5MB.</p>

                {/* Basic Information */}
                  
                  <form onSubmit={handleProfileUpdate} className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Ad *
                        </label>
                        <input
                          type="text"
                          name="first_name"
                          value={profileData.first_name}
                          onChange={handleProfileChange}
                          required
                          className="w-full px-3 py-2 h-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#137fec] focus:border-transparent"
                          placeholder="Ad"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Soyad *
                        </label>
                        <input
                          type="text"
                          name="last_name"
                          value={profileData.last_name}
                          onChange={handleProfileChange}
                          required
                          className="w-full px-3 py-2 h-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#137fec] focus:border-transparent"
                          placeholder="Soyad"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          E-posta *
                        </label>
                        <input
                          type="email"
                          name="email"
                          value={profileData.email}
                          disabled
                          className="w-full px-3 py-2 h-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#137fec] focus:border-transparent bg-gray-100"
                          placeholder="ornek@email.com"
                        />
                        <p className="text-xs text-gray-500 mt-1">E-posta değiştirilemez</p>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Telefon
                        </label>
                        <input
                          type="tel"
                          name="phone"
                          value={profileData.phone}
                          onChange={handleProfileChange}
                          maxLength="13"
                          className="w-full px-3 py-2 h-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#137fec] focus:border-transparent"
                          placeholder="555 000 00 00"
                        />
                        {profileData.phone && profileData.phone.replace(/\D/g, '').length < 10 && (
                          <p className="text-xs text-red-500 mt-1">
                            Lütfen geçerli bir telefon numarası girin
                          </p>
                        )}
                      </div>
                    </div>

                    <div className="flex justify-end pt-4">
                      <button
                        type="submit"
                        className="bg-[#137fec] text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                        disabled={loading}
                      >
                        {loading ? 'Güncelleniyor...' : 'Kaydet'}
                      </button>
                    </div>
                  </form>
              </div>
            )}

            {/* Password Tab */}
            {activeTab === 'password' && (
              <div className="max-w-md mx-auto">
                <h3 className="text-lg font-semibold text-gray-900 mb-6">Şifrenizi Güvenle Değiştirin</h3>
                <form onSubmit={handlePasswordChange} className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="current_password">
                      Mevcut Şifre
                    </label>
                    <input
                      className="w-full px-3 py-2 h-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#137fec] focus:border-transparent"
                      id="current_password"
                      name="current_password"
                      placeholder="Mevcut şifrenizi girin"
                      type="password"
                      value={passwordData.current_password}
                      onChange={handlePasswordChangeInput}
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="new_password">
                      Yeni Şifre
                    </label>
                    <input
                      className="w-full px-3 py-2 h-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#137fec] focus:border-transparent"
                      id="new_password"
                      name="new_password"
                      placeholder="Yeni şifrenizi oluşturun"
                      type="password"
                      value={passwordData.new_password}
                      onChange={handlePasswordChangeInput}
                      required
                      minLength="8"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="confirm_password">
                      Yeni Şifre Tekrarı
                    </label>
                    <input
                      className="w-full px-3 py-2 h-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#137fec] focus:border-transparent"
                      id="confirm_password"
                      name="confirm_password"
                      placeholder="Yeni şifrenizi doğrulayın"
                      type="password"
                      value={passwordData.confirm_password}
                      onChange={handlePasswordChangeInput}
                      required
                      minLength="8"
                    />
                  </div>
                  <div className="flex justify-end pt-4">
                    <button
                      className="bg-[#137fec] text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                      type="submit"
                      disabled={loading}
                    >
                      {loading ? 'Değiştiriliyor...' : 'Şifreyi Değiştir'}
                    </button>
                  </div>
                </form>
              </div>
            )}

            {/* Roles Tab */}
            {activeTab === 'roles' && (
              <div>
                <h2 className="text-xl font-bold text-gray-800">Rol ve Yetki Bilgileri</h2>
                <p className="mt-1 text-sm text-gray-500">Kullanıcı rolünüz ve bu role atanmış yetkiler aşağıda listelenmiştir.</p>
                
                <div className="border-t border-gray-200 px-6 md:px-8 py-6">
                  <div className="space-y-6">
                    <div className="grid md:grid-cols-3 gap-2 md:gap-4 items-center">
                      <p className="text-sm font-medium text-gray-600">Rol(ler)</p>
                      <div className="md:col-span-2">
                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold bg-blue-100 text-blue-600">
                          {userRole?.name || (typeof user.role === 'string' ? user.role : user.role?.name) || 'Kullanıcı'}
                        </span>
                        {userRole?.description && (
                          <p className="text-xs text-gray-500 mt-1">{userRole.description}</p>
                        )}
                      </div>
                    </div>
                    
                    <div className="grid md:grid-cols-3 gap-2 md:gap-4 items-start">
                      <p className="text-sm font-medium text-gray-600 pt-1.5">Menü Yetkileri</p>
                      <div className="md:col-span-2 flex flex-wrap gap-2">
                        {userRole?.permissions && userRole.permissions.length > 0 ? (
                          userRole.permissions.map((permission, index) => (
                            <span
                              key={index}
                              className="flex items-center gap-1.5 text-sm text-gray-700 bg-gray-100 px-3 py-1.5 rounded-md"
                            >
                              <span className="material-symbols-outlined text-base text-gray-500">
                                {permission.includes('candidate') ? 'folder_open' :
                                 permission.includes('job') ? 'work' :
                                 permission.includes('report') ? 'bar_chart' :
                                 permission.includes('user') ? 'person' :
                                 permission.includes('role') ? 'admin_panel_settings' : 'settings'}
                              </span>
                              {permission.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                            </span>
                          ))
                        ) : (
                          <span className="text-sm text-gray-500">Yetki bilgisi bulunamadı</span>
                        )}
                      </div>
                    </div>
                    
                    <div className="grid md:grid-cols-3 gap-2 md:gap-4 items-start">
                      <p className="text-sm font-medium text-gray-600 pt-1.5">İşlem Yetkileri</p>
                      <div className="md:col-span-2 flex flex-wrap gap-2">
                        {userRole?.permissions && userRole.permissions.length > 0 ? (
                          userRole.permissions
                            .filter(permission => 
                              permission.includes('create') || 
                              permission.includes('update') || 
                              permission.includes('delete') || 
                              permission.includes('read')
                            )
                            .map((permission, index) => {
                              const action = permission.split('_').pop();
                              const colorClass = action === 'create' ? 'text-green-700 bg-green-100' :
                                               action === 'update' ? 'text-yellow-700 bg-yellow-100' :
                                               action === 'delete' ? 'text-red-700 bg-red-100' :
                                               'text-blue-700 bg-blue-100';
                              const icon = action === 'create' ? 'add_circle' :
                                         action === 'update' ? 'edit' :
                                         action === 'delete' ? 'delete' :
                                         'visibility';
                              const label = action === 'create' ? 'Ekle' :
                                           action === 'update' ? 'Güncelle' :
                                           action === 'delete' ? 'Sil' :
                                           'Görüntüle';
                              
                              return (
                                <span
                                  key={index}
                                  className={`flex items-center gap-1.5 text-sm ${colorClass} px-3 py-1.5 rounded-md`}
                                >
                                  <span className="material-symbols-outlined text-base">{icon}</span>
                                  {label}
                                </span>
                              );
                            })
                        ) : (
                          <span className="text-sm text-gray-500">İşlem yetkisi bulunamadı</span>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Messages */}
            {error && (
              <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg" onClick={clearMessages}>
                <div className="flex">
                  <div className="flex-shrink-0">
                    <span className="material-symbols-outlined text-red-400">error</span>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-800">{error}</p>
                  </div>
                </div>
              </div>
            )}

            {success && (
              <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg" onClick={clearMessages}>
                <div className="flex">
                  <div className="flex-shrink-0">
                    <span className="material-symbols-outlined text-green-400">check_circle</span>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-green-800">{success}</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserProfileNew;